<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java-变量与运算符</title>
    <url>/2019/10/31/Java-%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<ul>
<li><p>变量和运算符是任何一种语言的基础，没有一个好的基础，很难盖起高楼大厦。这里写一点自己觉得重要的东西。</p>
</li>
</ul>
<a id="more"></a>

<h2 id="Java中的名称命名规范"><a href="#Java中的名称命名规范" class="headerlink" title="Java中的名称命名规范"></a>Java中的名称命名规范</h2><p>给本科生上课的时候发现，很多人对标识符等起名时很随意，很难让人  “见名知意”  。所以今天文章开头就写一下命名的规范。顺便推荐一本书《代码整洁之道》。</p>
<h3 id="包名："><a href="#包名：" class="headerlink" title="包名："></a>包名：</h3><p>多单词组成时所有字母都小写： xxxyyyzzz</p>
<h3 id="类名、接口名："><a href="#类名、接口名：" class="headerlink" title="类名、接口名："></a>类名、接口名：</h3><p>多单词组成时，所有单词的首字母大写： XxxYyyZzz</p>
<h3 id="变量名、方法名："><a href="#变量名、方法名：" class="headerlink" title="变量名、方法名："></a>变量名、方法名：</h3><p>多单词组成时，第一个单词首字母小写，第二个单词开始每个<br>单词首字母大写： xxxYyyZzz</p>
<h3 id="常量名："><a href="#常量名：" class="headerlink" title="常量名："></a>常量名：</h3><p>所有字母都大写。多单词时每个单词用下划线连接： XXX_YYY_ZZZ</p>
<h2 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h2><p>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算。  </p>
<p>byte,short,char之间不会相互转换，他们三者在计算时首先转换为int类型 。</p>
<p>当把任何基本数据类型的值和字符串(String)进行连接运算时(+)，基本数据类型的值将自动转化为字符串(String)类型。几个简单的例子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="number">4</span>; <span class="comment">//判断对错： no</span></span><br><span class="line">String str2 = <span class="number">3.5f</span> + “”; <span class="comment">//判断str2对错： yes</span></span><br><span class="line">System.out.println(str2); <span class="comment">//输出： ”3.5”</span></span><br><span class="line">System.out .println(<span class="number">3</span>+<span class="number">4</span>+“Hello!”); <span class="comment">//输出： 7Hello!</span></span><br><span class="line">System.out.println(“Hello!”+<span class="number">3</span>+<span class="number">4</span>); <span class="comment">//输出： Hello!34</span></span><br><span class="line">System.out.println(‘a’+<span class="number">1</span>+“Hello!”); <span class="comment">//输出： 98Hello!</span></span><br><span class="line">System.out.println(“Hello”+‘a’+<span class="number">1</span>); <span class="comment">//输出： Helloa1</span></span><br></pre></td></tr></table></figure>

<h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><p>二进制(binary)： 0,1 ，满2进1.以0b或0B开头。<br>十进制(decimal)： 0-9 ，满10进1。<br>八进制(octal)： 0-7 ，满8进1. 以数字0开头表示。<br>十六进制(hex)： 0-9及A-F，满16进1. 以0x或0X开头表示。此处的A-F不区分大小写。<br>如： 0x21AF +1= 0X21B0</p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>我觉得和C语言差不多，如果以后遇见不同的地方，再回来更改。</p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>emmmm 实在不知道写点什么了，今天不写了，拜拜~。~ 2019年10月31日22:55:54</p>
]]></content>
  </entry>
  <entry>
    <title>Java_语言概述</title>
    <url>/2019/10/30/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>​        主要在本节讲解：软件开发、语言的概述、运行机制、环境搭建、常见问题及解决方法、注释、API、常用工具的介绍。</p>
<a id="more"></a>

<h2 id="软件开发"><a href="#软件开发" class="headerlink" title="软件开发"></a>软件开发</h2><p> <a href="https://baike.baidu.com/item/软件/12053" target="_blank" rel="noopener">软件</a>开发是根据用户要求建造出<a href="https://baike.baidu.com/item/软件系统/224122" target="_blank" rel="noopener">软件系统</a>或者系统中的软件部分的过程。软件开发是一项包括需求捕捉、<a href="https://baike.baidu.com/item/需求分析/2012709" target="_blank" rel="noopener">需求分析</a>、设计、实现和测试的系统工程。软件一般是用某种<a href="https://baike.baidu.com/item/程序设计语言/2317999" target="_blank" rel="noopener">程序设计语言</a>来实现的。通常采用<a href="https://baike.baidu.com/item/软件开发工具/4605523" target="_blank" rel="noopener">软件开发工具</a>可以进行开发。软件分为<a href="https://baike.baidu.com/item/系统软件/215962" target="_blank" rel="noopener">系统软件</a>和<a href="https://baike.baidu.com/item/应用软件/216367" target="_blank" rel="noopener">应用软件</a>，并不只是包括可以在<a href="https://baike.baidu.com/item/计算机/140338" target="_blank" rel="noopener">计算机</a>上运行的程序，与这些程序相关的文件一般也被认为是软件的一部分。 <a href="https://baike.baidu.com/item/软件设计/10170122" target="_blank" rel="noopener">软件设计</a>思路和方法的一般过程，包括设计软件的功能和实现的算法和方法、软件的总体结构设计和<a href="https://baike.baidu.com/item/模块设计/4815800" target="_blank" rel="noopener">模块设计</a>、编程和调试、程序联调和测试以及编写、提交程序。  —百度百科</p>
<h2 id="编程语言的介绍"><a href="#编程语言的介绍" class="headerlink" title="编程语言的介绍"></a>编程语言的介绍</h2><p>计算机语言（Computer Language）指用于人与计算机之间通讯的语言。计算机语言是人与计算机之间传递信息的媒介。计算机系统最大特征是指令通过一种语言传达给机器。为了使电子计算机进行各种工作，就需要有一套用以编写计算机程序的数字、字符和语法规划，由这些字符和语法规则组成计算机各种指令（或各种语句）。这些就是计算机能接受的语言。                 —百度百科</p>
<h3 id="常见的语言"><a href="#常见的语言" class="headerlink" title="常见的语言"></a>常见的语言</h3><p>C/C++ java php kotlin python scala 等。Tiobe网站可以查看各种语言的排行榜</p>
<h3 id="各种语言的优缺点"><a href="#各种语言的优缺点" class="headerlink" title="各种语言的优缺点"></a>各种语言的优缺点</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><p>优点：有益于编写小而快的程序。很容易与汇编语言结合。具有很高的标准化，因此其他平台上的各版本非常相似。<br>缺点：不容易支持面向对象技术。语法有时会非常难以理解，并造成滥用。</p>
<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><p>优点：组织大型程序时比C语言好得多。很好的支持面向对象机制。通用数据结构，如链表和可增长的阵列组成的库减轻了由于处理低层细节的负担。<br>缺点：非常大而复杂。与C语言一样存在语法滥用问题。比C慢。大多数编译器没有把整个语言正确的实现。</p>
<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>优点：二进制码可移植到其他平台。程序可以在网页中运行。内含的类库非常标准且极其健壮。自动分配合垃圾回收避免程序中资源泄漏。网上数量巨大的代码例程。<br>缺点：使用一个“虚拟机”来运行可移植的字节码而非本地机器码，程序将比真正编译器慢。有很多技术（例如“即时”编译器）很大的提高了Java的速度，不过速度永远比不过机器码方案。早期的功能，如AWT没经过慎重考虑，虽然被正式废除，但为了保持向后兼容不得不保留。越高级的技术，造成处理低级的机器功能越困难，Sun为这门语言增加新的“受祝福”功能的速度实在太慢。</p>
<h4 id="其它的语言百度搜索吧！！！"><a href="#其它的语言百度搜索吧！！！" class="headerlink" title="其它的语言百度搜索吧！！！"></a>其它的语言百度搜索吧！！！</h4><h2 id="Java的运行机制"><a href="#Java的运行机制" class="headerlink" title="Java的运行机制"></a>Java的运行机制</h2><h3 id="语言的特点"><a href="#语言的特点" class="headerlink" title="语言的特点"></a>语言的特点</h3><h4 id="跨平台性"><a href="#跨平台性" class="headerlink" title="跨平台性"></a>跨平台性</h4><p>所谓的跨平台性，是指软件可以不受计算机硬件和操作系统的约束而在任意计算机环境下正常运行。这是软件发展的趋势和编程人员追求的目标。之所以这样说，是因为计算机硬件的种类繁多，操作系统也各不相同，不同的用户和公司有自己不同的计算机环境偏好，而软件为了能在这些不同的环境里正常运行，就需要独立于这些平台。<br>　　而在Java语言中， Java自带的虚拟机很好地实现了跨平台性。 Java源程序代码经过编译后生成二进制的字节码是与平台无关的，但是可被Java虚拟机识别的一种机器码指令。 Java虚拟机提供了一个字节码到底层硬件平台及操作系统的屏障，使得Java语言具备跨平台性。</p>
<h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><p>面向对象是指以对象为基本粒度，其下包含属性和方法。对象的说明用属性表达，而通过使用方法来操作这个对象。面向对象技术使得应用程序的开发变得简单易用，节省代码。Java是一种面向对象的语言，也继承了面向对象的诸多好处，如代码扩展、代码复用等。</p>
<h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>安全性可以分为四个层面，即语言级安全性、编译时安全性、运行时安全性、可执行代码安全性。语言级安全性指Java的数据结构是完整的对象，这些封装过的数据类型具有安全性。编译时要进行Java语言和语义的检查，保证每个变量对应一个相应的值，编译后生成Java类。运行时Java类需要类加载器载入www jxzxmr net，并经由字节码校验器校验之后才可以运行。 Java类在网络上使用时，对它的权限进行了设置，保证了被访问用户的安全性。</p>
<h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><p>多线程在操作系统中已得到了最成功的应用。多线程是指允许一个应用程序同时存在两个或两个以上的线程，用于支持事务并发和多任务处理。 Java除了内置的多线程技术之外，还定义了一些类、方法等来建立和管理用户定义的多线程。</p>
<h4 id="简单易用"><a href="#简单易用" class="headerlink" title="简单易用"></a>简单易用</h4><p>Java源代码的书写不拘泥于特定的环境，可以用记事本、文本编辑器等编辑软件来实现，然后将源文件进行编译，编译通过后可直接运行，通过调试则可得到想要的结果。</p>
<h3 id="Java的两种核心机制"><a href="#Java的两种核心机制" class="headerlink" title="Java的两种核心机制"></a>Java的两种核心机制</h3><p>Java虚拟机、垃圾收集机制（以后详细介绍吧）</p>
<h2 id="Java环境的搭建"><a href="#Java环境的搭建" class="headerlink" title="Java环境的搭建"></a>Java环境的搭建</h2><p>百度上太多的安装方法了，这里就不写了</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>//注释</p>
<h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>/星注释星/</p>
<p>不可以嵌套使用</p>
<h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><p>/星星 注释星/</p>
<p>可以被Javadoc解析。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>对所写程序进行解释说明，增强可读性，方便自己和他人</p>
<p>调试所写代码（单行多行注释）</p>
<h2 id="JavaAPI文档"><a href="#JavaAPI文档" class="headerlink" title="JavaAPI文档"></a>JavaAPI文档</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>==在一个Java源文件中可以声明多个class，但是最多一个类声明public而且声明为public的类 的类名必须与源文件相同。==</p>
<p>程序的入口是main（），格式是固定的。</p>
<p><strong>感觉写的好啰嗦，以后的文章只写一些我觉得重要的东西，尽量做到简介精炼。</strong></p>
<p>拜拜大家，2019年10月30日22:50:51！！！</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>语言概述</tag>
        <tag>Java</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_栈与队列</title>
    <url>/2019/10/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<p>​    不要抄袭</p>
<a id="more"></a>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>栈与队列</tag>
        <tag>C语言</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_学习引言</title>
    <url>/2019/10/29/Java-%E5%AD%A6%E4%B9%A0%E5%BC%95%E8%A8%80/</url>
    <content><![CDATA[<p>​    人工智能的发展越来越完善，大数据的应用也必将增多，人才需求也必将增加。因此学习大数据的相关知识也逐渐变得重要，Java语言就是以一种重要的大数据开发语言，如Hadoop等。因此在这里复习自己大学所学的Java基础知识，同时进行总结记录。</p>
<a id="more"></a>

<h2 id="技术轮廓"><a href="#技术轮廓" class="headerlink" title="技术轮廓"></a>技术轮廓</h2><p>主要在以后的文章中，我会介绍基础程序设计。其它的内容视情况更新。今天第一次写，偷个懒，少些点顺便试试网页的运行情况。拜拜大家。2019年10月29日22:58:07</p>
<p><img src="/2019/10/29/Java-%E5%AD%A6%E4%B9%A0%E5%BC%95%E8%A8%80/1.png" alt="Java的学习总结图"></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础</tag>
        <tag>引言</tag>
      </tags>
  </entry>
</search>
