<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据结构_排序算法</title>
    <url>/2019/11/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>文中图片、部分文字转载<a href="https://blog.csdn.net/yuxuan20062007/article/details/85186860" target="_blank" rel="noopener">十大经典排序算法（动图演示）</a> 感谢作者贡献，如需删除请联系本人！ </p>
<p><strong>排序</strong>是计算机内经常进行的一种操作，其目的是将一组“无序”的记录序列调整为“有序”的记录序列。分内部排序和外部排序，若整个排序过程不需要访问外存便能完成，则称此类排序问题为内部排序。反之，若参加排序的记录数量很大，整个序列的排序过程不可能在内存中完成，则称此类排序问题为外部排序。内部排序的过程是一个逐步扩大记录的有序序列长度的过程。</p>
<a id="more"></a>

<h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。 </p>
<p>算法描述</p>
<ol>
<li>从第一个元素开始，该元素可以认为已经被排序；</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li>
<li>将新元素插入到该位置后；</li>
<li>重复步骤2~5。</li>
</ol>
<p>动图演示</p>
<p><img src="/2019/11/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1.gif" alt="直接插入排序"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接插入排序算法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">insertSort</span> <span class="params">(<span class="keyword">int</span>  r[ ], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123; 	<span class="keyword">int</span> i,j;	</span><br><span class="line">    <span class="keyword">clock_t</span> begin,finish;</span><br><span class="line">    <span class="keyword">double</span> duration;</span><br><span class="line">    begin=clock();</span><br><span class="line">   	<span class="keyword">for</span> (i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">   	&#123; </span><br><span class="line">    	r[<span class="number">0</span>]=r[i]; j=i<span class="number">-1</span>;</span><br><span class="line">       	<span class="keyword">while</span> (r[<span class="number">0</span>]&lt;r[j])</span><br><span class="line">       	&#123;  </span><br><span class="line">        	r[j+<span class="number">1</span>]=r[j];	</span><br><span class="line">	 		j=j<span class="number">-1</span>;	</span><br><span class="line">    	&#125;</span><br><span class="line">     	r[j+<span class="number">1</span>]=r[<span class="number">0</span>];</span><br><span class="line">		<span class="comment">//displayArray(r,n);   //调试用，便于查看中间结果  		</span></span><br><span class="line">	&#125;</span><br><span class="line">	finish=clock();</span><br><span class="line">	duration =(<span class="keyword">double</span>)(finish - begin) / CLOCKS_PER_SEC;</span><br><span class="line">	<span class="built_in">printf</span>( <span class="string">"\n%f seconds\n"</span>, duration );  </span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序。</p>
<p>算法描述：</p>
<ul>
<li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li>
<li>按增量序列个数k，对序列进行k 趟排序；</li>
<li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>
</ul>
<p>动图演示</p>
<p><img src="/2019/11/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/2.gif" alt="2"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//希尔排序算法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">shellSort</span> <span class="params">(<span class="keyword">int</span>  r[ ], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123; 	<span class="keyword">int</span> i,j,d;</span><br><span class="line">	<span class="keyword">for</span> (d=n/<span class="number">2</span>; d&gt;=<span class="number">1</span>; d=d/<span class="number">2</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (i=d+<span class="number">1</span>; i&lt;=n; i++)  <span class="comment">//将r[i]插入到所属的子序列中</span></span><br><span class="line">		&#123;</span><br><span class="line">     		r[<span class="number">0</span>]=r[i];                     <span class="comment">//暂存待插入记录 </span></span><br><span class="line">     		j=i-d;                   <span class="comment">//j指向所属子序列的最后一个记录</span></span><br><span class="line">     		<span class="keyword">while</span> (j&gt;<span class="number">0</span> &amp;&amp; r[<span class="number">0</span>]&lt;r[j])</span><br><span class="line">     		&#123; </span><br><span class="line">          		r[j+d]=r[j];       <span class="comment">//记录后移d个位置</span></span><br><span class="line">          		j=j-d;            <span class="comment">//比较同一子序列的前一个记录</span></span><br><span class="line">      		&#125;</span><br><span class="line">      		r[j+d]=r[<span class="number">0</span>];       		</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//displayArray(r,n);   //调试用，便于查看中间结果 </span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>
<p>算法描述</p>
<ul>
<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li>
<li>针对所有的元素重复以上的步骤，除了最后一个；</li>
<li>重复步骤1~3，直到排序完成。</li>
</ul>
<p>动图演示</p>
<p><img src="/2019/11/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/3.gif" alt="3"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序算法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> r[ ], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">    <span class="keyword">int</span> exchange,bound,j;</span><br><span class="line">	exchange=n; 	</span><br><span class="line">    <span class="keyword">while</span> (exchange) </span><br><span class="line">    &#123;</span><br><span class="line">        bound=exchange; </span><br><span class="line">        exchange=<span class="number">0</span>; </span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;bound; j++)</span><br><span class="line">            <span class="keyword">if</span> (r[j]&gt;r[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                r[<span class="number">0</span>]=r[j]; r[j]=r[j+<span class="number">1</span>]; r[j+<span class="number">1</span>]=r[<span class="number">0</span>];</span><br><span class="line">	      		exchange=j; </span><br><span class="line">            &#125;</span><br><span class="line">         <span class="comment">//displayArray(r,n);</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p>
<p>算法描述</p>
<p>快速排序使用分治法来把一个串分为两个子串。具体算法描述如下：</p>
<ul>
<li>从数列中挑出一个元素，称为 “基准”；</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区操作；</li>
<li>递归地把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ul>
<p>动图演示</p>
<p><img src="/2019/11/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/4.gif" alt="4"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//快速排序算法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> k[],<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">if</span>(s&lt;t)</span><br><span class="line">	&#123;</span><br><span class="line">		i=s;j=t+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">do</span>&#123;</span><br><span class="line">				i++;</span><br><span class="line">			&#125;<span class="keyword">while</span>(!(k[s]&lt;k[i]||i==t));</span><br><span class="line">			<span class="keyword">do</span>&#123;</span><br><span class="line">				j--;</span><br><span class="line">			&#125;<span class="keyword">while</span>(!(k[s]&gt;k[j]||j==s));</span><br><span class="line">			<span class="keyword">if</span>(i&lt;j) &#123;k[<span class="number">0</span>]=k[i];k[i]=k[j];k[j]=k[<span class="number">0</span>];&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		k[<span class="number">0</span>]=k[s];k[s]=k[j];k[j]=k[<span class="number">0</span>];<span class="comment">//swap(&amp;k[s],&amp;k[j]);</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//displayArray(k,n);   //调试用，便于查看中间结果</span></span><br><span class="line">		</span><br><span class="line">		quickSort(k,s,j<span class="number">-1</span>,n);</span><br><span class="line">		quickSort(k,j+<span class="number">1</span>,t,n);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。 </p>
<p>算法描述</p>
<ul>
<li>把长度为n的输入序列分成两个长度为n/2的子序列；</li>
<li>对这两个子序列分别采用归并排序；</li>
<li>将两个排序好的子序列合并成一个最终的排序序列。</li>
</ul>
<p>动图演示</p>
<p><img src="/2019/11/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/5.gif" alt="5"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//归并相邻两个子序列 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span> <span class="params">(<span class="keyword">int</span> r[ ], <span class="keyword">int</span> r1[ ], <span class="keyword">int</span> s, <span class="keyword">int</span> m, <span class="keyword">int</span> t )</span></span></span><br><span class="line"><span class="function"></span>&#123;	<span class="keyword">int</span> i,j,k;</span><br><span class="line">    i=s;   j=m+<span class="number">1</span>;   k=s;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=m &amp;&amp; j&lt;=t)</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="keyword">if</span> (r[i]&lt;=r[j])  r1[k++]=r[i++];</span><br><span class="line">        <span class="keyword">else</span>  r1[k++]=r[j++]; </span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (i&lt;=m)  <span class="keyword">while</span> (i&lt;=m)              <span class="comment">//收尾处理</span></span><br><span class="line">                           r1[k++]=r[i++];    <span class="comment">//前一个子序列</span></span><br><span class="line">     <span class="keyword">else</span>  <span class="keyword">while</span> (j&lt;=t)</span><br><span class="line">                  r1[k++]=r[j++];             <span class="comment">//后一个子序列</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//一趟二路归并 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">MergePass</span> <span class="params">(<span class="keyword">int</span>  r[ ], <span class="keyword">int</span>  r1[ ], <span class="keyword">int</span>  n, <span class="keyword">int</span>  h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i=<span class="number">1</span>,k=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">while</span> (i &lt;= n<span class="number">-2</span>*h+<span class="number">1</span>)                <span class="comment">//情况1</span></span><br><span class="line">     &#123;</span><br><span class="line">           Merge (r, r1, i, i+h<span class="number">-1</span>,i+<span class="number">2</span>*h<span class="number">-1</span>);</span><br><span class="line">           i+=<span class="number">2</span>*h;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (i&lt; n-h+<span class="number">1</span>) Merge (r, r1, i,i+h<span class="number">-1</span>, n);   <span class="comment">//情况2</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">for</span> (k=i; k&lt;=n; k++)    <span class="comment">//情况3</span></span><br><span class="line">                 r1[k]=r[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二路归并排序算法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">MergeSort</span> <span class="params">(<span class="keyword">int</span> r[ ], <span class="keyword">int</span> r1[ ], <span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;	<span class="keyword">int</span> h;</span><br><span class="line">    h=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (h&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">         MergePass (r, r1, n, h);</span><br><span class="line">         h=<span class="number">2</span>*h;</span><br><span class="line">         <span class="comment">//displayArray(r1,n);  //调试用，便于查看中间结果</span></span><br><span class="line">         MergePass (r1, r, n, h);</span><br><span class="line">         h=<span class="number">2</span>*h;</span><br><span class="line">         <span class="comment">//displayArray(r,n); //调试用，便于查看中间结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">mergeSort</span><span class="params">(arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> middle = Math.floor(len / <span class="number">2</span>),</span><br><span class="line">        left = arr.slice(<span class="number">0</span>, middle),</span><br><span class="line">        right = arr.slice(middle);</span><br><span class="line">    <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">function <span class="title">merge</span><span class="params">(left, right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">while</span> (left.length&gt;<span class="number">0</span> &amp;&amp; right.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">            result.push(left.shift());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.push(right.shift());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (left.length)</span><br><span class="line">        result.push(left.shift());</span><br><span class="line">    <span class="keyword">while</span> (right.length)</span><br><span class="line">        result.push(right.shift());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p>
<p>算法描述</p>
<ul>
<li>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</li>
<li>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；</li>
<li>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</li>
</ul>
<p>动图演示</p>
<p><img src="/2019/11/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/6.gif" alt="6"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//堆调整 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shift</span> <span class="params">( <span class="keyword">int</span> r[ ], <span class="keyword">int</span> k, <span class="keyword">int</span> m )</span></span></span><br><span class="line"><span class="function"></span>&#123;	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">int</span> temp;</span><br><span class="line">	<span class="comment">//要筛选结点的编号为k，堆中最后一个结点的编号为m </span></span><br><span class="line">    i=k;  j=<span class="number">2</span>*i;  temp=r[i];  <span class="comment">//将筛选记录暂存</span></span><br><span class="line">    <span class="keyword">while</span> (j&lt;=m )           <span class="comment">//筛选还没有进行到叶子</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j&lt;m &amp;&amp; r[j]&lt;r[j+<span class="number">1</span>]) j++;  <span class="comment">//左右孩子中取较大者</span></span><br><span class="line">        <span class="keyword">if</span> (temp &gt;r[j]) <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">             r[i]=r[j];   i=j;   j=<span class="number">2</span>*i;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     r[i]=temp;   <span class="comment">//将筛选记录移到正确位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//堆排序算法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">heapSort</span> <span class="params">( <span class="keyword">int</span>  r[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span> (i=n/<span class="number">2</span>; i&gt;=<span class="number">1</span>; i--)      <span class="comment">//初建堆</span></span><br><span class="line">       shift(r, i, n) ;  </span><br><span class="line">	     </span><br><span class="line"> 	<span class="comment">//displayArray(r,n);  </span></span><br><span class="line"> 	</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;n; i++ )</span><br><span class="line">    &#123;  j = n-i+<span class="number">1</span>;</span><br><span class="line">       r[<span class="number">0</span>]=r[<span class="number">1</span>];r[<span class="number">1</span>]=r[j];r[j]=r[<span class="number">0</span>];;        <span class="comment">//移走堆顶</span></span><br><span class="line">       shift(r, <span class="number">1</span>, n-i);               <span class="comment">//重建堆</span></span><br><span class="line">       <span class="comment">//displayArray(r,n);   //调试用，便于查看中间结果 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>数据结构</tag>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_图</title>
    <url>/2019/11/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/bce71b2bdbc8" target="_blank" rel="noopener">数据结构：图（简书）</a> 推荐一个文章！！！</p>
<p>图是重要的数据结构类型，通过结合代码，介绍图的一些操作。</p>
<a id="more"></a>

<h2 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h2><p> 图（graph）是由一些点（vertex）和这些点之间的连线（edge）所组成的；其中，点通常称为<strong><em>\</em>（vertex）**</strong>，而点到点之间的连线通常称之为<strong><em>\</em>边或者弧（edge）**</strong>。通常记为G=（V,E）。 </p>
<h2 id="图的创建"><a href="#图的创建" class="headerlink" title="图的创建"></a>图的创建</h2><h3 id="图的邻接矩阵"><a href="#图的邻接矩阵" class="headerlink" title="图的邻接矩阵"></a>图的邻接矩阵</h3><p>图的邻接矩阵存储方式是用两个数组来表示图。一个一维数组存储图中顶点信息，一个二维数组（称为邻接矩阵）存储图中的边或弧的信息。 </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建图的邻接矩阵 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MGraph</span><span class="params">( )</span> </span></span><br><span class="line"><span class="function"></span>&#123;	<span class="keyword">int</span> vertexNum,arcNum;</span><br><span class="line">	<span class="keyword">int</span> i,j,k;</span><br><span class="line">	<span class="comment">//datatype vertex[N];</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入顶点个数和边的个数："</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;vertexNum, &amp;arcNum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入顶点的值："</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;vertexNum; i++) </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;mGraph.vertex[i]);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;vertexNum; i++)    <span class="comment">//初始化邻接矩阵</span></span><br><span class="line">	   <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;vertexNum; j++)</span><br><span class="line">           mGraph.arc[i][j]=<span class="number">0</span>;        </span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;vertexNum; i++)    <span class="comment">//初始化邻接矩阵中顶点的出度值和入度值  </span></span><br><span class="line">	&#123;	mGraph.degree_out[i] = <span class="number">0</span>; mGraph.degree_in[i] = <span class="number">0</span>; &#125;	</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入边（边依附的两个顶点的序号）："</span>);          </span><br><span class="line">    <span class="keyword">for</span> (k=<span class="number">0</span>; k&lt;arcNum; k++)      <span class="comment">//依次输入每一条边</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;i,&amp;j);     <span class="comment">//边依附的两个顶点的序号</span></span><br><span class="line">        i--; j--;</span><br><span class="line">        mGraph.arc[i][j]=<span class="number">1</span>;  <span class="comment">//置有边标志        </span></span><br><span class="line">		<span class="comment">//mGraph.arc[j][i]=1;    </span></span><br><span class="line">	 	mGraph.degree_out[i]++;  <span class="comment">//计算顶点的出度 </span></span><br><span class="line">	  	mGraph.degree_in[j]++;  <span class="comment">//计算顶点的出度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vertexNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了检测创建的图是否正确、输出图的邻接矩阵 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> vertexNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n输出顶点的值：\n"</span>);</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;vertexNum; i++)  <span class="comment">//输出顶点的值 </span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d  "</span>,mGraph.vertex[i]);</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n输出邻接矩阵：\n"</span>);    </span><br><span class="line"> 	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;vertexNum; i++)    <span class="comment">//输出邻接矩阵</span></span><br><span class="line">	&#123;   <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;vertexNum; j++)</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">" %d  "</span> ,mGraph.arc[i][j]);   </span><br><span class="line"> 		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="图的邻接表"><a href="#图的邻接表" class="headerlink" title="图的邻接表"></a>图的邻接表</h3><p>数组与链表相结合的存储方法称为邻接表。<br> 图中顶点用一个一维数组存储，当然，顶点也可以用单链表来存储，不过数组可以较容易地读取顶点信息，更加方便。另外，对于顶点数组中，每个数据元素还需要存储指向第一个邻接点的指针，以便于查找该顶点的边信息。图中每个顶点vi的所有邻接点构成一个线性表，由于邻接点的个数不定，所以用单链表存储，无向图称为顶点vi 的边表，有向图则称为顶点vi作为弧尾的出边表</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建图的邻接表 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">ALGraph</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">	<span class="keyword">int</span> vertexNum,arcNum;   </span><br><span class="line">    datatype  x;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">s</span>;</span> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入顶点个数和边的个数："</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;vertexNum, &amp;arcNum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入顶点的值："</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;vertexNum; i++)   </span><br><span class="line">    <span class="comment">//输入顶点信息，初始化边表</span></span><br><span class="line">    &#123;	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">       	adjlist[i].vertex = x;</span><br><span class="line">  	 	adjlist[i].firstedge=<span class="literal">NULL</span>;   </span><br><span class="line">     	adjlist[i].degree_in = <span class="number">0</span>; adjlist[i].degree_out = <span class="number">0</span>; <span class="comment">//初始化入度和出度值 </span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入边（边依附的两个顶点的序号）："</span>); </span><br><span class="line">	<span class="keyword">for</span> (k=<span class="number">0</span>; k&lt;arcNum; k++)   </span><br><span class="line">     <span class="comment">//输入边的信息存储在边表中</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;i,&amp;j); i--; j--;   </span><br><span class="line">         s=(struct ArcNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ArcNode)); </span><br><span class="line">         s-&gt;adjvex=j;  	        </span><br><span class="line">         s-&gt;next=adjlist[i].firstedge;    </span><br><span class="line">         adjlist[i].firstedge=s;</span><br><span class="line">         adjlist[j].degree_in++ ; adjlist[i].degree_out++; <span class="comment">//统计入度和出度值 </span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> vertexNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了检测创建的图是否正确，输出图的邻接表结构</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">displayALgraph</span><span class="params">(<span class="keyword">int</span> vertexNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;	<span class="keyword">int</span> i,j;</span><br><span class="line">	datatype  x,y;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">p</span>;</span>  </span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n输出顶点的值及其邻接边：\n"</span>);</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;vertexNum; i++)  <span class="comment">//输出顶点的值 </span></span><br><span class="line">    &#123;   </span><br><span class="line"> 		x = adjlist[i].vertex;</span><br><span class="line"> 		<span class="built_in">printf</span>(<span class="string">"%d  :"</span>, x );</span><br><span class="line"> 		p = adjlist[i].firstedge;</span><br><span class="line"> 		<span class="keyword">while</span>( p )</span><br><span class="line"> 		&#123;</span><br><span class="line"> 			j = p-&gt;adjvex;</span><br><span class="line"> 			y = adjlist[j].vertex;</span><br><span class="line"> 			<span class="built_in">printf</span>(<span class="string">"(%d,%d)  "</span>,x,y);</span><br><span class="line"> 			p = p-&gt;next;</span><br><span class="line"> 		&#125;</span><br><span class="line"> 		<span class="built_in">printf</span>(<span class="string">"\n"</span>); 		</span><br><span class="line">    &#125;      </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">displayALgraph</span><span class="params">(<span class="keyword">int</span> vertexNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;	<span class="keyword">int</span> i,j;</span><br><span class="line">	datatype  x,y;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">p</span>;</span>  </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n输出顶点的值及其邻接边：\n"</span>);</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;vertexNum; i++)  <span class="comment">//输出顶点的值 </span></span><br><span class="line">    &#123;   </span><br><span class="line"> 		x = adjlist[i].vertex;</span><br><span class="line"> 		<span class="built_in">printf</span>(<span class="string">"%d  :"</span>, x );</span><br><span class="line"> 		p = adjlist[i].firstedge;</span><br><span class="line"> 		<span class="keyword">while</span>( p )</span><br><span class="line"> 		&#123;</span><br><span class="line"> 			j = p-&gt;adjvex;</span><br><span class="line"> 			y = adjlist[j].vertex;</span><br><span class="line"> 			<span class="built_in">printf</span>(<span class="string">"(%d,%d)  "</span>,x,y);</span><br><span class="line"> 			p = p-&gt;next;</span><br><span class="line"> 		&#125;</span><br><span class="line"> 		<span class="built_in">printf</span>(<span class="string">"\n"</span>); 		</span><br><span class="line">    &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><p>从图中某一顶点出发访遍图中其余顶点，且使每一个顶点仅被访问一次，这一过程就叫做图的遍历。</p>
<h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><ol>
<li><p>从图中某个顶点v出发，访问v。</p>
</li>
<li><p>找到刚访问过得顶点的第一个未被访问的邻接点，访问该顶点。以该顶点为新顶点，重复此步骤，直至刚访问的顶点没有未被访问的邻接点为止。</p>
</li>
<li><p>返回前一个访问过得且扔有未被访问的邻接点的顶点，找到该顶点的下一个未被访问的邻接点，访问该顶点。</p>
</li>
<li><p>重复步骤2，3，直至图中所有顶点都被访问过。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//图的深度优先遍历 （邻接矩阵上） </span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">DFSTraverse1</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> vertexNum)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"%d  "</span>,mGraph.vertex[v]); </span><br><span class="line">     visited [v]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;vertexNum; j++)</span><br><span class="line">         <span class="keyword">if</span> (mGraph.arc[v][j]==<span class="number">1</span> &amp;&amp; visited[j]==<span class="number">0</span>)</span><br><span class="line">           DFSTraverse1( j , vertexNum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图的深度优先遍历 （邻接表上） </span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">DFSTraverse2</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;  	<span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">p</span>;</span>  	</span><br><span class="line">	<span class="keyword">int</span> j=<span class="number">0</span>;   </span><br><span class="line">	</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d  "</span>,adjlist[v].vertex);  visited[v]=<span class="number">1</span>;</span><br><span class="line">    p=adjlist[v].firstedge;    </span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        j = p-&gt;adjvex;</span><br><span class="line">        <span class="keyword">if</span> (visited[j]==<span class="number">0</span>) DFSTraverse2(j);</span><br><span class="line">    p=p-&gt;next;           </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3><ol>
<li><p>从图中某个顶点v出发，访问v。</p>
</li>
<li><p>依次访问v的各个未被访问过得邻接点。</p>
</li>
<li><p>分别从这些邻接点出发依次访问他们的邻接点，并使“先被访问的顶点的邻接点”先于“后被访问的顶点的邻接点”被访问。重复步骤3，直至图中所有已被访问的顶点的邻接点都被访问到。</p>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//图的广度优先遍历 （邻接矩阵上） </span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">BFSTraverse1</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> vertexNum)</span> </span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> front,rear,Q[N];</span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">	front=rear=<span class="number">-1</span>;   <span class="comment">//假设采用顺序队列且不会发生溢出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d  "</span>,mGraph.vertex[v]);</span><br><span class="line">    visited[v]=<span class="number">1</span>;  Q[++rear]=v; </span><br><span class="line">    <span class="keyword">while</span> (front!=rear)</span><br><span class="line">     &#123;</span><br><span class="line">         v=Q[++front];   </span><br><span class="line">         <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;vertexNum; j++)</span><br><span class="line">            <span class="keyword">if</span> (mGraph.arc[v][j]==<span class="number">1</span> &amp;&amp; visited[j]==<span class="number">0</span> ) &#123;</span><br><span class="line"> 	       <span class="built_in">printf</span>(<span class="string">"%d  "</span>,mGraph.vertex[j]);</span><br><span class="line">	       visited[j]=<span class="number">1</span>; Q[++rear]=j;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图的广度优先遍历 （邻接表上） </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTraverse2</span><span class="params">(<span class="keyword">int</span> v)</span> </span></span><br><span class="line"><span class="function"></span>&#123;  	<span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">p</span>;</span></span><br><span class="line">	<span class="keyword">int</span> front,rear,Q[N];</span><br><span class="line">	<span class="keyword">int</span> j; </span><br><span class="line">	front=rear=<span class="number">-1</span>;   </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d  "</span>,adjlist[v].vertex); visited[v]=<span class="number">1</span>;  Q[++rear]=v;   </span><br><span class="line">   	<span class="keyword">while</span> (front!=rear)</span><br><span class="line">   	&#123;</span><br><span class="line">       v=Q[++front];    p=adjlist[v].firstedge;    </span><br><span class="line">       <span class="keyword">while</span> (p!=<span class="literal">NULL</span>) </span><br><span class="line">       &#123;</span><br><span class="line">          j = p-&gt;adjvex;</span><br><span class="line">          <span class="keyword">if</span> (visited[j]==<span class="number">0</span>) </span><br><span class="line">		  &#123;	<span class="built_in">printf</span>(<span class="string">"%d  "</span>,adjlist[j].vertex);  </span><br><span class="line">    		visited[j]=<span class="number">1</span>; Q[++rear]=j;</span><br><span class="line">	      &#125;</span><br><span class="line">          p=p-&gt;next;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="顶点的度"><a href="#顶点的度" class="headerlink" title="顶点的度"></a>顶点的度</h2><p>连接顶点的边的数量称为该顶点的度。顶点的度在有向图和无向图中具有不同的表示。对于无向图，一个顶点V的度比较简单，其是连接该顶点的边的数量，记为D(V)。 例如，图二所示的无向图中，顶点V5的度为3。而V6的度为2。</p>
<p>   对于有向图要稍复杂些，根据连接顶点V的边的方向性，一个顶点的度有<strong>入度</strong>和<strong>出度</strong>之分。</p>
<ul>
<li>入度是以该顶点为端点的入边数量， 记为ID(V)。</li>
<li>出度是以该顶点为端点的出边数量， 记为OD(V)。</li>
</ul>
<p>邻接顶点是指图结构中一条边的两个顶点。 邻接顶点在有向图和无向图中具有不同的表示。对于无向图，邻接顶点比较简单。例如，在图二所示的无向图中，顶点V2和顶点V6互为邻接顶点，顶点V2和顶点V5互为邻接顶点等。</p>
<p>   对于有向图要稍复杂些，根据连接顶点V的边的方向性，两个顶点分别称为<strong>起始顶点</strong>(起点或始点)和<strong>结束顶点</strong>(终点)。有向图的邻接顶点分为两类：</p>
<ul>
<li><strong>入边邻接顶点</strong>：连接该顶点的边中的起始顶点。例如，对于组成&lt;V2，V6&gt;这条边的两个顶点，V2是V6的入边邻接顶点。</li>
<li><strong>出边邻接顶点：</strong>连接该顶点的边中的结束顶点。例如，对于组成&lt;V2，V6&gt;这条边的两个顶点，V6是V2的出边邻接顶点。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDegree1</span><span class="params">(<span class="keyword">int</span> vertexNum)</span>  <span class="comment">//输出顶点的度（基于邻接矩阵的） </span></span></span><br><span class="line"><span class="function"></span>&#123;	<span class="keyword">int</span> i;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;vertexNum; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"顶点 %d 的出度为： %d  ，入度为： %d\n"</span>,mGraph.vertex[i],mGraph.degree_out[i],mGraph.degree_in[i]);	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDegree2</span><span class="params">(<span class="keyword">int</span> vertexNum)</span>  <span class="comment">//输出顶点的度（基于邻接表的）</span></span></span><br><span class="line"><span class="function"></span>&#123;	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;vertexNum; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"顶点 %d 的出度为： %d  ，入度为： %d\n"</span>,adjlist[i].vertex,adjlist[i].degree_out,adjlist[i].degree_in);	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用于存储图的邻接矩阵的数组</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> </span><br><span class="line">	datatype vertex[N];</span><br><span class="line">	<span class="keyword">int</span> arc[N][N];</span><br><span class="line">	<span class="keyword">int</span> degree_out[N];  <span class="comment">//顶点的出度 </span></span><br><span class="line">	<span class="keyword">int</span> degree_in[N];   <span class="comment">//顶点的入度  </span></span><br><span class="line">&#125;mGraph;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span></span></span><br><span class="line"><span class="class">&#123;</span>    <span class="keyword">int</span> adjvex; </span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">VertexNode</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">      datatype  vertex;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">firstedge</span>;</span></span><br><span class="line">      <span class="keyword">int</span> degree_out;   <span class="comment">//顶点的出度 </span></span><br><span class="line">      <span class="keyword">int</span> degree_in;    <span class="comment">//顶点的入度 </span></span><br><span class="line">&#125; adjlist[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> visited[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化visited数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initVisited</span><span class="params">(<span class="keyword">int</span> vertexNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;vertexNum; i++) </span><br><span class="line">		visited[i] = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//函数模块</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line"><span class="comment">//功能模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>数据结构</tag>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_树和二叉树</title>
    <url>/2019/11/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<p>树和二叉树是重要的数据结构类型，通过结合代码，介绍树和二叉树的一些操作。</p>
<a id="more"></a>

<h2 id="二叉树的创建"><a href="#二叉树的创建" class="headerlink" title="二叉树的创建"></a>二叉树的创建</h2><p>在计算机科学中，二叉树是每个结点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。二叉树常被用于实现二叉查找树和二叉堆。<br>一棵深度为k，且有2^k-1个结点的二叉树，称为满二叉树。这种树的特点是每一层上的结点数都是最大结点数。而在一棵二叉树中，除最后一层外，若其余层都是满的，并且或者最后一层是满的，或者是在右边缺少连续若干结点，则此二叉树为完全二叉树。具有n个结点的完全二叉树的深度为floor(log2n)+1。深度为k的完全二叉树，至少有2k-1个叶子结点，至多有2k-1个结点。   — 百度百科</p>
<p>一个简单的二叉树如下图所示，不妨代码使用递归的方式创建二叉树。</p>
<p><img src="/2019/11/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/1.png" alt="1"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以递归方式创建二叉树。输入: A B D F # # # E # # C G # # #</span></span><br><span class="line"><span class="function">bitree * <span class="title">creatBitree</span><span class="params">()</span><span class="comment">//使用二叉链表结构</span></span></span><br><span class="line"><span class="function"></span>&#123;   bitree *root ;<span class="keyword">char</span> ch;</span><br><span class="line">    ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">'#'</span>)     root = <span class="literal">NULL</span>; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        root=(bitree*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(bitree)); </span><br><span class="line">        root-&gt;data=ch; root-&gt;lchild = <span class="literal">NULL</span>;  root-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">        root-&gt;lchild =creatBitree(); </span><br><span class="line">        root-&gt;rchild= creatBitree(); </span><br><span class="line">     &#125; 	</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过面的代码就可以创建一个简单的二叉树了。</p>
<h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><p>二叉树的遍历分为前序遍历（根左右）、中序遍历（左根右）、后续遍历（左右根）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前序遍历的递归算法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span>   <span class="title">PreOrder</span><span class="params">( bitree  *root)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root ==<span class="literal">NULL</span>)  <span class="keyword">return</span>;     </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c  "</span>,root-&gt;data);         </span><br><span class="line">            PreOrder( root-&gt;lchild);    </span><br><span class="line">            PreOrder(root-&gt;rchild);    </span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//中序遍历的递归算法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span> <span class="params">(bitree  *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (root==<span class="literal">NULL</span>) <span class="keyword">return</span>;     </span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">         	InOrder(root-&gt;lchild); </span><br><span class="line"> 	     	<span class="built_in">printf</span>(<span class="string">"%c  "</span>,root-&gt;data);</span><br><span class="line">	       	InOrder(root-&gt;rchild);</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序遍历的递归算法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">PostOrder</span><span class="params">(bitree  *root)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (root==<span class="literal">NULL</span>) <span class="keyword">return</span>; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">         PostOrder(root-&gt;lchild); </span><br><span class="line">         PostOrder(root-&gt;rchild); </span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"%c  "</span>,root-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二叉树的深度"><a href="#二叉树的深度" class="headerlink" title="二叉树的深度"></a>二叉树的深度</h2><p>二叉树的深度计算，首先要判断节点，以下是计算二叉树的详细步骤：</p>
<p>1、一颗树只有一个节点，它的深度是1；</p>
<p>2、二叉树的根节点只有左子树而没有右子树，那么可以判断，二叉树的深度应该是其左子树的深度加1；</p>
<p>3、二叉树的根节点只有右子树而没有左子树，那么可以判断，那么二叉树的深度应该是其右树的深度加1；</p>
<p>4、二叉树的根节点既有右子树又有左子树，那么可以判断，那么二叉树的深度应该是其左右子树的深度较大值加1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算二叉树的深度 （递归）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">Depth</span><span class="params">(bitree *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="keyword">int</span> hl = <span class="number">0</span>, hr = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">         hl= Depth(root -&gt;lchild);</span><br><span class="line">         hr= Depth(root -&gt;rchild);</span><br><span class="line">        <span class="keyword">if</span>( hl&gt;= hr) <span class="keyword">return</span> (hl+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span>         <span class="keyword">return</span> (hr+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="计算二叉树结点总数"><a href="#计算二叉树结点总数" class="headerlink" title="计算二叉树结点总数"></a>计算二叉树结点总数</h2><p>二叉树结点总数，可以借助遍历的思想。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算结点总数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Count</span><span class="params">(bitree *root)</span>  <span class="comment">//n为结点总数 </span></span></span><br><span class="line"><span class="function"></span>&#123;	<span class="keyword">int</span> n = <span class="number">0</span>, n_lc = <span class="number">0</span>, n_rc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">         n_lc = Count(root-&gt;lchild);         </span><br><span class="line">         n_rc = Count(root-&gt;rchild);</span><br><span class="line">         n = n_lc + n_rc + <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">return</span> n;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="计算二叉树叶子结点总数"><a href="#计算二叉树叶子结点总数" class="headerlink" title="计算二叉树叶子结点总数"></a>计算二叉树叶子结点总数</h2><p>计算二叉树的所有叶子节点的数量。当一个节点的左孩子和右孩子都为空时。它是叶子节点。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算叶子结点总数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">leafNum</span><span class="params">(bitree  *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">int</span> n0 = <span class="number">0</span>, n0_lc = <span class="number">0</span>, n0_rc = <span class="number">0</span>;;</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!root-&gt;lchild &amp;&amp; !root-&gt;rchild) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">		n0_lc = leafNum(root-&gt;lchild);         </span><br><span class="line">  		n0_rc = leafNum(root-&gt;rchild);</span><br><span class="line">  		n0 = n0_lc + n0_rc ;</span><br><span class="line">    	<span class="keyword">return</span> n0;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="以广义表的形式输出二叉树结构"><a href="#以广义表的形式输出二叉树结构" class="headerlink" title="以广义表的形式输出二叉树结构"></a>以广义表的形式输出二叉树结构</h2><p>广义表是一种非线性的数据结构，是线性表的一种推广。它被广泛的应用于人工智能等领域的表处理语言LISP语言中。在LISP语言中，广义表是一种最基本的数据结构，就连LISP 语言的程序也表示为一系列的广义表。</p>
<p>   线性表被定义为一个有限的序列（a1，a2，a3，…，an）其中ai被限定为是单个数据元素。广义表也是n个数据元素d1，d2，d3，…，dn的有限序列，但不同的是，广义表中的di 则既可以是单个元素，还可以是一个广义表，通常记作：GL=（d1，d2，d3，…，dn）。GL是广义表的名字，通常广义表的名字用大写字母表示。n是广义表的长度。若其中di是一个广义表，则称di是广义表GL的子表。在广义表GL中，d1是广义表GL的表头，而广义表GL其余部分组成的表（d2，d3，…，dn）称为广义表的表尾。由此可见广义表的定义是递归定义的。因为在定义广义表时，又使用了广义表的概念。</p>
<p>注意：<br>   ①广义表通常用圆括号括起来，用逗号分隔其中的元素。<br>   ②为了区分原子和广义表，书写时用大写字母表示广义表，用小写字母表示原子。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">displayBitree</span><span class="params">(bitree  *root<span class="comment">//以广义表的形式输出二叉树结构</span></span></span></span><br><span class="line"><span class="function"><span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">if</span>( root == <span class="literal">NULL</span>)&#123;<span class="built_in">printf</span>(<span class="string">" "</span>); <span class="keyword">return</span> ;&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="built_in">printf</span>(<span class="string">"%c"</span>, root-&gt;data);</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">if</span>( root-&gt;lchild || root-&gt;rchild )</span></span></span><br><span class="line"><span class="function"><span class="params">	&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="built_in">printf</span>(<span class="string">"\("</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">		displayBitree(root-&gt;lchild);</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="built_in">printf</span>(<span class="string">","</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">		displayBitree(root-&gt;rchild);</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="built_in">printf</span>(<span class="string">"\)"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">	&#125;	</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>希望大家通过本文了解：1．二叉树的结构特征，以及各种存储结构的特点及适用范围。2．如何在内存中创建二叉树。3．二叉树的各种遍历算法的递归实现。4．在遍历算法基础上设计其他问题求解的算法程序。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>C语言</tag>
        <tag>树和二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_变量和运算符</title>
    <url>/2019/10/31/Java-%E5%8F%98%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<p>变量和运算符是任何一种语言的基础，没有一个好的基础，很难盖起高楼大厦。这里写一点自己觉得重要的东西。</p>
<a id="more"></a>

<h2 id="Java中的名称命名规范"><a href="#Java中的名称命名规范" class="headerlink" title="Java中的名称命名规范"></a>Java中的名称命名规范</h2><p>给本科生上课的时候发现，很多人对标识符等起名时很随意，很难让人  “见名知意”  。所以今天文章开头就写一下命名的规范。顺便推荐一本书《代码整洁之道》。</p>
<h3 id="包名："><a href="#包名：" class="headerlink" title="包名："></a>包名：</h3><p>多单词组成时所有字母都小写： xxxyyyzzz</p>
<h3 id="类名、接口名："><a href="#类名、接口名：" class="headerlink" title="类名、接口名："></a>类名、接口名：</h3><p>多单词组成时，所有单词的首字母大写： XxxYyyZzz</p>
<h3 id="变量名、方法名："><a href="#变量名、方法名：" class="headerlink" title="变量名、方法名："></a>变量名、方法名：</h3><p>多单词组成时，第一个单词首字母小写，第二个单词开始每个<br>单词首字母大写： xxxYyyZzz</p>
<h3 id="常量名："><a href="#常量名：" class="headerlink" title="常量名："></a>常量名：</h3><p>所有字母都大写。多单词时每个单词用下划线连接： XXX_YYY_ZZZ</p>
<h2 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h2><p>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算。  </p>
<p>byte,short,char之间不会相互转换，他们三者在计算时首先转换为int类型 。</p>
<p>当把任何基本数据类型的值和字符串(String)进行连接运算时(+)，基本数据类型的值将自动转化为字符串(String)类型。几个简单的例子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="number">4</span>; <span class="comment">//判断对错： no</span></span><br><span class="line">String str2 = <span class="number">3.5f</span> + “”; <span class="comment">//判断str2对错： yes</span></span><br><span class="line">System.out.println(str2); <span class="comment">//输出： ”3.5”</span></span><br><span class="line">System.out .println(<span class="number">3</span>+<span class="number">4</span>+“Hello!”); <span class="comment">//输出： 7Hello!</span></span><br><span class="line">System.out.println(“Hello!”+<span class="number">3</span>+<span class="number">4</span>); <span class="comment">//输出： Hello!34</span></span><br><span class="line">System.out.println(‘a’+<span class="number">1</span>+“Hello!”); <span class="comment">//输出： 98Hello!</span></span><br><span class="line">System.out.println(“Hello”+‘a’+<span class="number">1</span>); <span class="comment">//输出： Helloa1</span></span><br></pre></td></tr></table></figure>

<h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><p>二进制(binary)： 0,1 ，满2进1.以0b或0B开头。<br>十进制(decimal)： 0-9 ，满10进1。<br>八进制(octal)： 0-7 ，满8进1. 以数字0开头表示。<br>十六进制(hex)： 0-9及A-F，满16进1. 以0x或0X开头表示。此处的A-F不区分大小写。<br>如： 0x21AF +1= 0X21B0</p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>我觉得和C语言差不多，如果以后遇见不同的地方，再回来更改。</p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>emmmm 实在不知道写点什么了，今天不写了，拜拜~。~ 2019年10月31日22:55:54</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_语言概述</title>
    <url>/2019/10/30/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>​        主要在本节讲解：软件开发、语言的概述、运行机制、环境搭建、常见问题及解决方法、注释、API、常用工具的介绍。</p>
<a id="more"></a>

<h2 id="软件开发"><a href="#软件开发" class="headerlink" title="软件开发"></a>软件开发</h2><p> <a href="https://baike.baidu.com/item/软件/12053" target="_blank" rel="noopener">软件</a>开发是根据用户要求建造出<a href="https://baike.baidu.com/item/软件系统/224122" target="_blank" rel="noopener">软件系统</a>或者系统中的软件部分的过程。软件开发是一项包括需求捕捉、<a href="https://baike.baidu.com/item/需求分析/2012709" target="_blank" rel="noopener">需求分析</a>、设计、实现和测试的系统工程。软件一般是用某种<a href="https://baike.baidu.com/item/程序设计语言/2317999" target="_blank" rel="noopener">程序设计语言</a>来实现的。通常采用<a href="https://baike.baidu.com/item/软件开发工具/4605523" target="_blank" rel="noopener">软件开发工具</a>可以进行开发。软件分为<a href="https://baike.baidu.com/item/系统软件/215962" target="_blank" rel="noopener">系统软件</a>和<a href="https://baike.baidu.com/item/应用软件/216367" target="_blank" rel="noopener">应用软件</a>，并不只是包括可以在<a href="https://baike.baidu.com/item/计算机/140338" target="_blank" rel="noopener">计算机</a>上运行的程序，与这些程序相关的文件一般也被认为是软件的一部分。 <a href="https://baike.baidu.com/item/软件设计/10170122" target="_blank" rel="noopener">软件设计</a>思路和方法的一般过程，包括设计软件的功能和实现的算法和方法、软件的总体结构设计和<a href="https://baike.baidu.com/item/模块设计/4815800" target="_blank" rel="noopener">模块设计</a>、编程和调试、程序联调和测试以及编写、提交程序。  —百度百科</p>
<h2 id="编程语言的介绍"><a href="#编程语言的介绍" class="headerlink" title="编程语言的介绍"></a>编程语言的介绍</h2><p>计算机语言（Computer Language）指用于人与计算机之间通讯的语言。计算机语言是人与计算机之间传递信息的媒介。计算机系统最大特征是指令通过一种语言传达给机器。为了使电子计算机进行各种工作，就需要有一套用以编写计算机程序的数字、字符和语法规划，由这些字符和语法规则组成计算机各种指令（或各种语句）。这些就是计算机能接受的语言。                 —百度百科</p>
<h3 id="常见的语言"><a href="#常见的语言" class="headerlink" title="常见的语言"></a>常见的语言</h3><p>C/C++ java php kotlin python scala 等。Tiobe网站可以查看各种语言的排行榜</p>
<h3 id="各种语言的优缺点"><a href="#各种语言的优缺点" class="headerlink" title="各种语言的优缺点"></a>各种语言的优缺点</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><p>优点：有益于编写小而快的程序。很容易与汇编语言结合。具有很高的标准化，因此其他平台上的各版本非常相似。<br>缺点：不容易支持面向对象技术。语法有时会非常难以理解，并造成滥用。</p>
<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><p>优点：组织大型程序时比C语言好得多。很好的支持面向对象机制。通用数据结构，如链表和可增长的阵列组成的库减轻了由于处理低层细节的负担。<br>缺点：非常大而复杂。与C语言一样存在语法滥用问题。比C慢。大多数编译器没有把整个语言正确的实现。</p>
<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>优点：二进制码可移植到其他平台。程序可以在网页中运行。内含的类库非常标准且极其健壮。自动分配合垃圾回收避免程序中资源泄漏。网上数量巨大的代码例程。<br>缺点：使用一个“虚拟机”来运行可移植的字节码而非本地机器码，程序将比真正编译器慢。有很多技术（例如“即时”编译器）很大的提高了Java的速度，不过速度永远比不过机器码方案。早期的功能，如AWT没经过慎重考虑，虽然被正式废除，但为了保持向后兼容不得不保留。越高级的技术，造成处理低级的机器功能越困难，Sun为这门语言增加新的“受祝福”功能的速度实在太慢。</p>
<h4 id="其它的语言百度搜索吧！！！"><a href="#其它的语言百度搜索吧！！！" class="headerlink" title="其它的语言百度搜索吧！！！"></a>其它的语言百度搜索吧！！！</h4><h2 id="Java的运行机制"><a href="#Java的运行机制" class="headerlink" title="Java的运行机制"></a>Java的运行机制</h2><h3 id="语言的特点"><a href="#语言的特点" class="headerlink" title="语言的特点"></a>语言的特点</h3><h4 id="跨平台性"><a href="#跨平台性" class="headerlink" title="跨平台性"></a>跨平台性</h4><p>所谓的跨平台性，是指软件可以不受计算机硬件和操作系统的约束而在任意计算机环境下正常运行。这是软件发展的趋势和编程人员追求的目标。之所以这样说，是因为计算机硬件的种类繁多，操作系统也各不相同，不同的用户和公司有自己不同的计算机环境偏好，而软件为了能在这些不同的环境里正常运行，就需要独立于这些平台。<br>　　而在Java语言中， Java自带的虚拟机很好地实现了跨平台性。 Java源程序代码经过编译后生成二进制的字节码是与平台无关的，但是可被Java虚拟机识别的一种机器码指令。 Java虚拟机提供了一个字节码到底层硬件平台及操作系统的屏障，使得Java语言具备跨平台性。</p>
<h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><p>面向对象是指以对象为基本粒度，其下包含属性和方法。对象的说明用属性表达，而通过使用方法来操作这个对象。面向对象技术使得应用程序的开发变得简单易用，节省代码。Java是一种面向对象的语言，也继承了面向对象的诸多好处，如代码扩展、代码复用等。</p>
<h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>安全性可以分为四个层面，即语言级安全性、编译时安全性、运行时安全性、可执行代码安全性。语言级安全性指Java的数据结构是完整的对象，这些封装过的数据类型具有安全性。编译时要进行Java语言和语义的检查，保证每个变量对应一个相应的值，编译后生成Java类。运行时Java类需要类加载器载入www jxzxmr net，并经由字节码校验器校验之后才可以运行。 Java类在网络上使用时，对它的权限进行了设置，保证了被访问用户的安全性。</p>
<h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><p>多线程在操作系统中已得到了最成功的应用。多线程是指允许一个应用程序同时存在两个或两个以上的线程，用于支持事务并发和多任务处理。 Java除了内置的多线程技术之外，还定义了一些类、方法等来建立和管理用户定义的多线程。</p>
<h4 id="简单易用"><a href="#简单易用" class="headerlink" title="简单易用"></a>简单易用</h4><p>Java源代码的书写不拘泥于特定的环境，可以用记事本、文本编辑器等编辑软件来实现，然后将源文件进行编译，编译通过后可直接运行，通过调试则可得到想要的结果。</p>
<h3 id="Java的两种核心机制"><a href="#Java的两种核心机制" class="headerlink" title="Java的两种核心机制"></a>Java的两种核心机制</h3><p>Java虚拟机、垃圾收集机制（以后详细介绍吧）</p>
<h2 id="Java环境的搭建"><a href="#Java环境的搭建" class="headerlink" title="Java环境的搭建"></a>Java环境的搭建</h2><p>百度上太多的安装方法了，这里就不写了</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>//注释</p>
<h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>/星注释星/</p>
<p>不可以嵌套使用</p>
<h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><p>/星星 注释星/</p>
<p>可以被Javadoc解析。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>对所写程序进行解释说明，增强可读性，方便自己和他人</p>
<p>调试所写代码（单行多行注释）</p>
<h2 id="JavaAPI文档"><a href="#JavaAPI文档" class="headerlink" title="JavaAPI文档"></a>JavaAPI文档</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>==在一个Java源文件中可以声明多个class，但是最多一个类声明public而且声明为public的类 的类名必须与源文件相同。==</p>
<p>程序的入口是main（），格式是固定的。</p>
<p><strong>感觉写的好啰嗦，以后的文章只写一些我觉得重要的东西，尽量做到简介精炼。</strong></p>
<p>拜拜大家，2019年10月30日22:50:51！！！</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础</tag>
        <tag>语言概述</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_栈与队列</title>
    <url>/2019/10/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<p>​    不要抄袭</p>
<a id="more"></a>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>数据结构</tag>
        <tag>栈与队列</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_学习引言</title>
    <url>/2019/10/29/Java-%E5%AD%A6%E4%B9%A0%E5%BC%95%E8%A8%80/</url>
    <content><![CDATA[<p>​    人工智能的发展越来越完善，大数据的应用也必将增多，人才需求也必将增加。因此学习大数据的相关知识也逐渐变得重要，Java语言就是以一种重要的大数据开发语言，如Hadoop等。因此在这里复习自己大学所学的Java基础知识，同时进行总结记录。</p>
<a id="more"></a>

<h2 id="技术轮廓"><a href="#技术轮廓" class="headerlink" title="技术轮廓"></a>技术轮廓</h2><p>主要在以后的文章中，我会介绍基础程序设计。其它的内容视情况更新。今天第一次写，偷个懒，少些点顺便试试网页的运行情况。拜拜大家。2019年10月29日22:58:07</p>
<p><img src="/2019/10/29/Java-%E5%AD%A6%E4%B9%A0%E5%BC%95%E8%A8%80/1.png" alt="Java的学习总结图"></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础</tag>
        <tag>引言</tag>
      </tags>
  </entry>
</search>
